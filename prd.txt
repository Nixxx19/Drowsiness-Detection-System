Project: Driver Drowsiness Detection System

üèÅ 1. Overview
The Driver Drowsiness Detection System aims to enhance road safety by identifying signs of fatigue in drivers through real-time video analysis. The system uses a webcam (or in-vehicle camera) to monitor the driver‚Äôs facial landmarks, detecting eye blinks, prolonged eye closure, and yawning as indicators of drowsiness. When detected, the system triggers visual and/or auditory alerts to wake the driver.

üéØ 2. Objectives
Primary Goal:
Reduce road accidents caused by driver fatigue through real-time detection and alert mechanisms.
Secondary Goals:
Implement a lightweight, camera-based detection system without requiring external sensors.
Maintain high accuracy across lighting and face-angle variations.
Operate in real-time (‚â• 10 FPS).

üë• 3. Target Users
User Type	Description	Needs
Individual Drivers	Car and truck drivers who drive for long durations	Need an alert when drowsiness occurs
Fleet Companies	Organizations managing multiple vehicles	Require monitoring to prevent fatigue-related accidents
Automobile OEMs	Manufacturers seeking safety feature integrations	Want embedded ML solution for smart vehicles

üîç 4. Problem Statement
Drowsy driving causes thousands of accidents annually. Manual monitoring is impractical, and existing commercial systems are expensive. There is a need for a low-cost, camera-based ML system capable of detecting early signs of drowsiness in real time.

‚öôÔ∏è 5. Key Features & Requirements
Category	Feature	Description	Priority
Core Detection	Eye Blink & Closure	Detects prolonged eye closure using Eye Aspect Ratio (EAR)	‚≠ê‚≠ê‚≠ê‚≠ê
Yawning Detection	Identifies mouth opening using Mouth Aspect Ratio (MAR)	‚≠ê‚≠ê‚≠ê
Head Pose Tracking	Detects head droop or tilt (optional enhancement)	‚≠ê‚≠ê
Alert System	Audio Alarm	Plays alert sound when drowsiness detected	‚≠ê‚≠ê‚≠ê‚≠ê
Visual Indicator	Displays on-screen warning	‚≠ê‚≠ê‚≠ê
Performance	Real-Time Processing	Must process at least 10 FPS	‚≠ê‚≠ê‚≠ê‚≠ê
Offline Functionality	Should not rely on internet connectivity	‚≠ê‚≠ê‚≠ê
UX/UI	Dashboard View	Display EAR, MAR, and state (alert/drowsy) in a small UI	‚≠ê‚≠ê
Scalability	Plug-and-Play	Should work with a normal webcam or USB camera	‚≠ê‚≠ê‚≠ê

üß∞ 6. Technology Stack
Layer	Technology	Description
Programming	Python 3.x	Core development language
CV Library	OpenCV	Image/video capture and processing
ML Library	Dlib	Facial landmark detection
Math & Utils	SciPy, NumPy, Imutils	EAR/MAR computation, geometry
Alert System	Pygame / Playsound	Audio alerts
ML	PyTorch / TensorFlow	CNN model for deep eye-state detection

üîÑ 7. System Workflow

[Start Webcam Feed]
      ‚Üì
[Face Detection ‚Üí Landmark Extraction]
      ‚Üì
[Calculate EAR (Eyes) & MAR (Mouth)]
      ‚Üì
[Threshold Comparison ‚Üí Drowsiness Check]
      ‚Üì
[If Drowsy ‚Üí Trigger Alert]
      ‚Üì
[Log or Display State on Dashboard]

üßÆ 8. Algorithms
Eye Aspect Ratio (EAR):
EAR = (‚Äñp2 ‚àí p6‚Äñ + ‚Äñp3 ‚àí p5‚Äñ) / (2 √ó ‚Äñp1 ‚àí p4‚Äñ)
 
Threshold: EAR < 0.25 for 15‚Äì20 frames ‚Üí Eyes closed
Mouth Aspect Ratio (MAR):
MAR = ‚Äñp3 ‚àí p9‚Äñ / ‚Äñp1 ‚àí p7‚Äñ
 
Threshold: MAR > 0.6 ‚Üí Yawning detected
Optional: Lightweight CNN for eye-state classification to complement EAR.

9. Non-Functional Requirements
Performance: Real-time processing at ‚â• 10 FPS on typical laptop hardware.
Privacy: All processing on-device; no video frames leave the machine.
Reliability: Use debouncing and consecutive-frame thresholds to avoid spurious alerts.
Portability: Works with built-in webcams and common USB cameras (macOS/Windows/Linux).
Usability: Minimal UI with clear alert feedback and start/stop controls.

üßæ 10. Success Metrics
Metric	Target
Detection Accuracy	‚â• 90% on test dataset
False Alarm Rate	‚â§ 5%
Real-Time FPS	‚â• 10 FPS
Latency	‚â§ 300ms
Power Efficiency	Suitable for laptop/car camera use

‚ö° 11. Risks & Mitigations
Risk	Impact	Mitigation
Poor lighting affects accuracy	High	Use histogram equalization, adaptive thresholding
Different head angles	Medium	Add head pose estimation
False positives (blink = drowsy)	Medium	Use consecutive-frame logic
Processing lag	Low	Optimize with multithreading, smaller frame size

12. Future Enhancements
Deep CNN model trained on drowsy/alert datasets.
Integration with IoT/Car Systems (e.g., brake/seat vibration).
